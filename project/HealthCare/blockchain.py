from web3 import Web3, HTTPProvider
import ipfsapi
import json

api = ipfsapi.Client('127.0.0.1', 5001)

ganache_url = "http://127.0.0.1:7545"
w3 = Web3(HTTPProvider(ganache_url))


# print(api.cat('QmPimk5muWnVt55kiJnaeK3mrTEFgocXghtokvDBmaaxhq'))
print(w3.isConnected())

address = "0x02d16Fb8f6C907bcA50b8f6f3cfa1Add696fa467"
bytecode = "0x608060405234801561001057600080fd5b506106df806100206000396000f3fe608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637c62d7e71461005c578063fb06066214610099578063fc355498146100d6575b600080fd5b34801561006857600080fd5b50610083600480360361007e919081019061048c565b610101565b60405161009091906105a2565b60405180910390f35b3480156100a557600080fd5b506100c060048036036100bb919081019061048c565b610246565b6040516100cd91906105a2565b60405180910390f35b3480156100e257600080fd5b506100eb6102a8565b6040516100f89190610580565b60405180910390f35b60008060009050600090505b60008054905081101561023b57826040516020018082805190602001908083835b602083101515610153578051825260208201915060208101905060208303925061012e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012060008281548110151561019d57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156102055780601f106101e3576101008083540402835291820191610205565b820191906000526020600020905b8154815290600101906020018083116101f1575b5050915050604051602081830303815290604052805190602001201415610230576001915050610241565b80600101905061010d565b60009150505b919050565b600061025182610101565b1561025f57600090506102a3565b600082908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061029c929190610391565b5050600190505b919050565b60606000805480602002602001604051908101604052809291908181526020016000905b82821015610388578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103745780601f1061034957610100808354040283529160200191610374565b820191906000526020600020905b81548152906001019060200180831161035757829003601f168201915b5050505050815260200190600101906102cc565b50505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103d257805160ff1916838001178555610400565b82800160010185558215610400579182015b828111156103ff5782518255916020019190600101906103e4565b5b50905061040d9190610411565b5090565b61043391905b8082111561042f576000816000905550600101610417565b5090565b90565b600082601f830112151561044957600080fd5b813561045c610457826105ea565b6105bd565b9150808252602083016020830185838301111561047857600080fd5b610483838284610652565b50505092915050565b60006020828403121561049e57600080fd5b600082013567ffffffffffffffff8111156104b857600080fd5b6104c484828501610436565b91505092915050565b60006104d882610623565b808452602084019350836020820285016104f185610616565b60005b8481101561052a57838303885261050c83835161054a565b925061051782610639565b91506020880197506001810190506104f4565b508196508694505050505092915050565b61054481610646565b82525050565b60006105558261062e565b808452610569816020860160208601610661565b61057281610694565b602085010191505092915050565b6000602082019050818103600083015261059a81846104cd565b905092915050565b60006020820190506105b7600083018461053b565b92915050565b6000604051905081810181811067ffffffffffffffff821117156105e057600080fd5b8060405250919050565b600067ffffffffffffffff82111561060157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60008115159050919050565b82818337600083830152505050565b60005b8381101561067f578082015181840152602081019050610664565b8381111561068e576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820cdd65da5aa45542a026ddc3b9fff0080f14ad6080b982d4807c565ae3df7a6456c6578706572696d656e74616cf50037"
abi = json.loads("""[
    {
      "constant": true,
      "inputs": [
        {
          "name": "hash",
          "type": "string"
        }
      ],
      "name": "check_existence",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "hash",
          "type": "string"
        }
      ],
      "name": "add_hash",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "get_hashes",
      "outputs": [
        {
          "name": "",
          "type": "string[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ]""")

contract = w3.eth.contract(abi=abi, bytecode=bytecode, address = address)


def uploadIpfs(file):
    res = api.add(file)
    print(contract.functions.add_hash(res.get('Hash')).transact({'from': w3.eth.accounts[1]}))
    if(contract.functions.add_hash(res.get('Hash')).transact({'from': w3.eth.accounts[1]})):
        print("Success")
        # f = open('hashes.txt', 'a')
        # f.write(res.get('Hash')+'\n')
        # f.close()

    else:
        print("No success")
    return res

